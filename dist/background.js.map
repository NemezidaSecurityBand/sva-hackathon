{"version":3,"sources":["../node_modules/crx-hotreload/hot-reload.js","utils/browser.js","popup/js/integration/virusTotalIntegration.js","background.js"],"names":["_browser","browser","chrome","e","window","_isChrome","$browser","isChromeBrowser","console","log","sendMessage","message","Promise","resolve","runtime","onMessage","handler","addListener","request","sender","sendResponse","result","then","API_KEY","REPORT_ULR","virusTotalScan","r","getReportForUrl","location","origin","scans","undefined","Object","values","map","item","detected","filter","length","Notification","requestPermission","permission","notification","url","params","URLSearchParams","apikey","resource","scan","toString","response","fetch","ok","json","USER_AGENT","ACCEPT_LANGUAGE","DNT","SPECIAL_CHARS","split","isOn","dntProfile","headers","setupHeaderModListener","webRequest","onBeforeSendHeaders","onBeforeSendHeadersListener","urls","startsWith","requestHeaders","modifyHeader","name","value","dntHeaders","reqHeaders","header","dntValue","toLowerCase","contentScriptQuery","URL"],"mappings":"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","file":"background.js","sourceRoot":"..\\src","sourcesContent":["const filesInDirectory = dir => new Promise (resolve =>\n    dir.createReader ().readEntries (entries =>\n        Promise.all (entries.filter (e => e.name[0] !== '.').map (e =>\n            e.isDirectory\n                ? filesInDirectory (e)\n                : new Promise (resolve => e.file (resolve))\n        ))\n        .then (files => [].concat (...files))\n        .then (resolve)\n    )\n)\n\nconst timestampForFilesInDirectory = dir =>\n        filesInDirectory (dir).then (files =>\n            files.map (f => f.name + f.lastModifiedDate).join ())\n\nconst watchChanges = (dir, lastTimestamp) => {\n    timestampForFilesInDirectory (dir).then (timestamp => {\n        if (!lastTimestamp || (lastTimestamp === timestamp)) {\n            setTimeout (() => watchChanges (dir, timestamp), 1000) // retry after 1s\n        } else {\n            chrome.runtime.reload ()\n        }\n    })\n}\n\nchrome.management.getSelf (self => {\n    if (self.installType === 'development') {\n        chrome.runtime.getPackageDirectoryEntry (dir => watchChanges (dir))\n        chrome.tabs.query ({ active: true, lastFocusedWindow: true }, tabs => { // NB: see https://github.com/xpl/crx-hotreload/issues/5\n            if (tabs[0]) {\n                chrome.tabs.reload (tabs[0].id)\n            }\n        })\n    }\n})\n","\nconst _browser = () => {\n  try {\n    return browser || chrome;\n  } catch( e ) {\n    return window['browser'] || window['chrome'];\n  }\n};\n\nconst _isChrome = () => {\n  return !!browser && !!chrome;\n};\n\nexport const $browser = chrome;\n// export const $browser = _browser();\n\n\nexport const isChromeBrowser = true;\nconsole.log('isChrome', isChromeBrowser);\n\nexport async function sendMessage(message) {\n  if( isChromeBrowser ) {\n    return new Promise(resolve => {\n      $browser.runtime.sendMessage(message, resolve);\n    });\n  } else {\n    return $browser.runtime.sendMessage(message);\n  }\n}\n\nexport function onMessage(handler) {\n  $browser.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    const result = handler(request, sender);\n    if( result instanceof Promise ) {\n      result.then(sendResponse);\n      return true;  // Will respond asynchronously\n    }\n    sendResponse(result);\n  });\n}\n\n","const API_KEY = \"fdc51984c8957e2af90d0a191db5067a5592f0becf042cab8c5e62925068721d\";\r\nconst REPORT_ULR = \"https://www.virustotal.com/vtapi/v2/url/report\";\r\n\r\nexport async function virusTotalScan() {\r\n  const r = await getReportForUrl(window.location.origin);\r\n  console.log(\"RRRRR\", r)\r\n\r\n  if( true ) return;\r\n\r\n  if( r.scans !== undefined ) {\r\n    let result = Object.values(r.scans);\r\n\r\n    console.log(\"array\", result)\r\n\r\n    let scans = result.map(item => item.detected).filter(item => item);\r\n\r\n    console.log(\"array*\", scans);\r\n\r\n    if( scans.length > 0 ) {\r\n      Notification.requestPermission()\r\n          .then((permission) => {\r\n            if( permission === \"granted\" ) {\r\n              let notification = new Notification(\"Сайт является небезопасным.\");\r\n            }\r\n          });\r\n    } else {\r\n      Notification.requestPermission()\r\n          .then((permission) => {\r\n            if( permission === \"granted\" ) {\r\n              let notification = new Notification(\"Сайт признан безопасным для посещения.\");\r\n            }\r\n\r\n          });\r\n    }\r\n  } else {\r\n    Notification.requestPermission()\r\n        .then((permission) => {\r\n          if( permission === \"granted\" ) {\r\n            let notification = new Notification(\"Нам не удалось проверить сайт\");\r\n          }\r\n        });\r\n  }\r\n  return r;\r\n}\r\n\r\nexport async function getReportForUrl(url) {\r\n  const params = new URLSearchParams({\r\n    apikey: API_KEY,\r\n    resource: url,\r\n    scan: 1\r\n  }).toString();\r\n\r\n  console.log(`${REPORT_ULR}?${params}`);\r\n  // let response = await fetch(`${REPORT_ULR}?${params}`);\r\n  let response = await fetch(`${REPORT_ULR}?apikey=${API_KEY}&resource=${url}&scan=1`);\r\n  return response.ok && await response.json();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import 'crx-hotreload';\nimport {$browser, onMessage} from \"./utils/browser\";\nimport {getReportForUrl, virusTotalScan} from \"./popup/js/integration/virusTotalIntegration\";\n\nconst USER_AGENT = \"Mozilla/5.0 (iPhone; CPU iPhone OS 6_1_4 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10B350 Safari/8536.25\";\nconst ACCEPT_LANGUAGE = \"en-US\";\nconst DNT = \"1\";\nconst SPECIAL_CHARS = '^$&+?.()|{}[]/'.split('');\n\nlet isOn = false;\n\nlet dntProfile = {\n  headers: {\n    // 'user-agent': USER_AGENT,\n    // 'accept-language': ACCEPT_LANGUAGE,\n    // 'dnt': DNT\n  }\n};\n\n\nfunction setupHeaderModListener() {\n  // $browser.webRequest.onBeforeSendHeaders.removeListener(onBeforeSendHeadersListener);\n\n  $browser.webRequest.onBeforeSendHeaders.addListener(\n      onBeforeSendHeadersListener,\n      {urls: ['<all_urls>']},\n      ['requestHeaders', 'blocking']\n  );\n}\n\nasync function onBeforeSendHeadersListener(request) {\n  if( request.url.startsWith('https://httpbin.org') ) {\n    // const r = await getReportForUrl(new URL(request.url).origin);\n    // console.log(r);\n  }\n\n  // return {requestHeaders: modifyHeader(dntProfile.headers, request.requestHeaders)};\n  return {requestHeaders: [...modifyHeader(dntProfile.headers, request.requestHeaders), {name: 'TEST', value: 'TEST'}]};\n}\n\nfunction modifyHeader(dntHeaders, reqHeaders) {\n  return reqHeaders.map(header => {\n    // console.log(header.name, header.value);\n    const dntValue = dntHeaders[header.name.toLowerCase()];\n    return {name: header.name, value: dntValue ?? header.value};\n  });\n}\n\n\nsetupHeaderModListener();\n\n\nonMessage(async (message) => {\n  if( message.contentScriptQuery === 'virusReport' ) {\n    return await getReportForUrl(new URL(message.url).origin);\n  }\n});\n"]}